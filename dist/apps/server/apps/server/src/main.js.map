{
  "version": 3,
  "sources": ["../../../../../../apps/server/src/main.ts"],
  "sourcesContent": ["import express from 'express';\nimport dotenv from 'dotenv';\nimport http from 'http';\nimport { Server, Socket } from 'socket.io';\nimport mongoose, { Document, Schema } from 'mongoose';\n\ndotenv.config();\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server, {\n  cors: {\n    origin: 'http://localhost:4200',\n    methods: ['GET', 'POST'],\n  },\n});\n\nconst uri = `mongodb+srv://toto:toto@todocluster.edut0b8.mongodb.net/?retryWrites=true&w=majority&appName=toDoCluster`;\n\nmongoose\n  .connect(uri)\n  .then(() => console.log('Connected to MongoDB'))\n  .catch((err) => console.error('Failed to connect to MongoDB', err));\n\ninterface IRoom extends Document {\n  room: string;\n  winsX: number;\n  winsO: number;\n}\n\nconst roomSchema = new Schema<IRoom>({\n  room: { type: String, required: true, unique: true },\n  winsX: { type: Number, default: 0 },\n  winsO: { type: Number, default: 0 },\n});\n\nconst Room = mongoose.model<IRoom>('Room', roomSchema);\n\ninterface Game {\n  board: (string | null)[];\n  currentPlayer: string;\n  players: string[];\n}\n\nconst games: { [key: string]: Game } = {};\n\nio.on('connection', (socket: Socket) => {\n  console.log('A user connected:', socket.id);\n\n  socket.on('create_or_join', async (room: string) => {\n    if (!games[room]) {\n      games[room] = {\n        board: Array(9).fill(null),\n        currentPlayer: 'X',\n        players: [],\n      };\n      await Room.findOneAndUpdate(\n        { room },\n        { $setOnInsert: { room, winsX: 0, winsO: 0 } },\n        { upsert: true, new: true }\n      );\n    }\n\n    if (games[room].players.length < 2) {\n      games[room].players.push(socket.id);\n      socket.join(room);\n\n      const roomData = await Room.findOne({ room });\n      io.to(socket.id).emit('joined', { game: games[room], scores: roomData });\n\n      if (games[room].players.length === 2) {\n        io.to(room).emit('start', { game: games[room], scores: roomData });\n      }\n    } else {\n      socket.emit('full', room);\n    }\n  });\n\n  socket.on(\n    'make_move',\n    async ({ room, index }: { room: string; index: number }) => {\n      const game = games[room];\n      if (\n        game &&\n        game.players.includes(socket.id) &&\n        game.board[index] === null\n      ) {\n        if (\n          (socket.id === game.players[0] && game.currentPlayer === 'X') ||\n          (socket.id === game.players[1] && game.currentPlayer === 'O')\n        ) {\n          game.board[index] = game.currentPlayer;\n          game.currentPlayer = game.currentPlayer === 'X' ? 'O' : 'X';\n          io.to(room).emit('move_made', { game });\n\n          const winner = checkWinner(game.board);\n          if (winner) {\n            if (winner === 'X') {\n              await Room.findOneAndUpdate({ room }, { $inc: { winsX: 1 } });\n            } else {\n              await Room.findOneAndUpdate({ room }, { $inc: { winsO: 1 } });\n            }\n            const updatedRoomData = await Room.findOne({ room });\n            io.to(room).emit('game_over', { winner, scores: updatedRoomData });\n          } else if (game.board.every((cell) => cell !== null)) {\n            io.to(room).emit('game_over', {\n              winner: 'Draw',\n              scores: await Room.findOne({ room }),\n            });\n          }\n        }\n      }\n    }\n  );\n\n  socket.on('reset_game', async (room: string) => {\n    if (games[room]) {\n      games[room].board = Array(9).fill(null);\n      const roomData = await Room.findOne({ room });\n      io.to(room).emit('game_reset', { game: games[room], scores: roomData });\n    }\n  });\n\n  socket.on('disconnect', () => {\n    console.log('User disconnected:', socket.id);\n    for (const room in games) {\n      if (games[room].players.includes(socket.id)) {\n        io.to(room).emit('player_disconnected');\n        delete games[room];\n      }\n    }\n  });\n});\n\nconst checkWinner = (board: (string | null)[]): string | null => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (const [a, b, c] of lines) {\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n      return board[a];\n    }\n  }\n  return null;\n};\n\nserver.listen(3001, () => {\n  console.log('Listening on *:3001');\n});\n"],
  "mappings": "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",
  "names": ["dotenv", "express", "http", "mongoose"]
}
