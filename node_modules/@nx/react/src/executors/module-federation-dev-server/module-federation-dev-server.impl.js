"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseStaticRemotesConfig = void 0;
const devkit_1 = require("@nx/devkit");
const dev_server_impl_1 = require("@nx/webpack/src/executors/dev-server/dev-server.impl");
const file_server_impl_1 = require("@nx/web/src/executors/file-server/file-server.impl");
const module_federation_1 = require("@nx/webpack/src/utils/module-federation");
const async_iterable_1 = require("@nx/devkit/src/utils/async-iterable");
const wait_for_port_open_1 = require("@nx/web/src/utils/wait-for-port-open");
const cache_directory_1 = require("nx/src/utils/cache-directory");
const node_child_process_1 = require("node:child_process");
const node_path_1 = require("node:path");
const node_fs_1 = require("node:fs");
const fs_1 = require("fs");
const path_1 = require("path");
function getBuildOptions(buildTarget, context) {
    const target = (0, devkit_1.parseTargetString)(buildTarget, context);
    const buildOptions = (0, devkit_1.readTargetOptions)(target, context);
    return {
        ...buildOptions,
    };
}
function startStaticRemotesFileServer(staticRemotesConfig, context, options) {
    let shouldMoveToCommonLocation = false;
    let commonOutputDirectory;
    for (const app of staticRemotesConfig.remotes) {
        const remoteBasePath = staticRemotesConfig.config[app].basePath;
        if (!commonOutputDirectory) {
            commonOutputDirectory = remoteBasePath;
        }
        else if (commonOutputDirectory !== remoteBasePath) {
            shouldMoveToCommonLocation = true;
            break;
        }
    }
    if (shouldMoveToCommonLocation) {
        commonOutputDirectory = (0, node_path_1.join)(devkit_1.workspaceRoot, 'tmp/static-remotes');
        for (const app of staticRemotesConfig.remotes) {
            const remoteConfig = staticRemotesConfig.config[app];
            (0, node_fs_1.cpSync)(remoteConfig.outputPath, (0, node_path_1.join)(commonOutputDirectory, remoteConfig.urlSegment), {
                force: true,
                recursive: true,
            });
        }
    }
    const staticRemotesIter = (0, file_server_impl_1.default)({
        cors: true,
        watch: false,
        staticFilePath: commonOutputDirectory,
        parallel: false,
        spa: false,
        withDeps: false,
        host: options.host,
        port: options.staticRemotesPort,
        ssl: options.ssl,
        sslCert: options.sslCert,
        sslKey: options.sslKey,
    }, context);
    return staticRemotesIter;
}
async function startRemotes(remotes, context, options, target = 'serve') {
    const remoteIters = [];
    for (const app of remotes) {
        const remoteProjectServeTarget = context.projectGraph.nodes[app].data.targets[target];
        const isUsingModuleFederationDevServerExecutor = remoteProjectServeTarget.executor.includes('module-federation-dev-server');
        const configurationOverride = options.devRemotes?.find((r) => typeof r !== 'string' && r.remoteName === app)?.configuration;
        const defaultOverrides = {
            ...(options.host ? { host: options.host } : {}),
            ...(options.ssl ? { ssl: options.ssl } : {}),
            ...(options.sslCert ? { sslCert: options.sslCert } : {}),
            ...(options.sslKey ? { sslKey: options.sslKey } : {}),
        };
        const overrides = target === 'serve'
            ? {
                watch: true,
                ...(isUsingModuleFederationDevServerExecutor
                    ? { isInitialHost: false }
                    : {}),
                ...defaultOverrides,
            }
            : { ...defaultOverrides };
        remoteIters.push(await (0, devkit_1.runExecutor)({
            project: app,
            target,
            configuration: configurationOverride ?? context.configurationName,
        }, overrides, context));
    }
    return remoteIters;
}
async function buildStaticRemotes(staticRemotesConfig, nxBin, context, options) {
    if (!staticRemotesConfig.remotes.length) {
        return;
    }
    devkit_1.logger.info(`NX Building ${staticRemotesConfig.remotes.length} static remotes...`);
    const mappedLocationOfRemotes = {};
    for (const app of staticRemotesConfig.remotes) {
        mappedLocationOfRemotes[app] = `http${options.ssl ? 's' : ''}://${options.host}:${options.staticRemotesPort}/${staticRemotesConfig.config[app].urlSegment}`;
    }
    process.env.NX_MF_DEV_SERVER_STATIC_REMOTES = JSON.stringify(mappedLocationOfRemotes);
    await new Promise((res) => {
        const staticProcess = (0, node_child_process_1.fork)(nxBin, [
            'run-many',
            `--target=build`,
            `--projects=${staticRemotesConfig.remotes.join(',')}`,
            ...(context.configurationName
                ? [`--configuration=${context.configurationName}`]
                : []),
            ...(options.parallel ? [`--parallel=${options.parallel}`] : []),
        ], {
            cwd: context.root,
            stdio: ['ignore', 'pipe', 'pipe', 'ipc'],
        });
        // File to debug build failures e.g. 2024-01-01T00_00_0_0Z-build.log'
        const remoteBuildLogFile = (0, node_path_1.join)(cache_directory_1.projectGraphCacheDirectory, `${new Date().toISOString().replace(/[:\.]/g, '_')}-build.log`);
        const stdoutStream = (0, node_fs_1.createWriteStream)(remoteBuildLogFile);
        staticProcess.stdout.on('data', (data) => {
            const ANSII_CODE_REGEX = /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
            const stdoutString = data.toString().replace(ANSII_CODE_REGEX, '');
            stdoutStream.write(stdoutString);
            if (stdoutString.includes('Successfully ran target build')) {
                staticProcess.stdout.removeAllListeners('data');
                devkit_1.logger.info(`NX Built ${staticRemotesConfig.remotes.length} static remotes`);
                res();
            }
        });
        staticProcess.stderr.on('data', (data) => devkit_1.logger.info(data.toString()));
        staticProcess.on('exit', (code) => {
            stdoutStream.end();
            if (code !== 0) {
                throw new Error(`Remote failed to start. A complete log can be found in: ${remoteBuildLogFile}`);
            }
        });
        process.on('SIGTERM', () => staticProcess.kill('SIGTERM'));
        process.on('exit', () => staticProcess.kill('SIGTERM'));
    });
}
function parseStaticRemotesConfig(staticRemotes, context) {
    if (!staticRemotes?.length) {
        return { remotes: [], config: undefined };
    }
    const config = {};
    for (const app of staticRemotes) {
        const outputPath = context.projectGraph.nodes[app].data.targets['build'].options.outputPath;
        const basePath = (0, node_path_1.dirname)(outputPath);
        const urlSegment = (0, node_path_1.basename)(outputPath);
        config[app] = { basePath, outputPath, urlSegment };
    }
    return { remotes: staticRemotes, config };
}
exports.parseStaticRemotesConfig = parseStaticRemotesConfig;
async function* moduleFederationDevServer(options, context) {
    const initialStaticRemotesPorts = options.staticRemotesPort;
    options.staticRemotesPort ??= options.port + 1;
    // Force Node to resolve to look for the nx binary that is inside node_modules
    const nxBin = require.resolve('nx/bin/nx');
    const currIter = options.static
        ? (0, file_server_impl_1.default)({
            ...options,
            parallel: false,
            withDeps: false,
            spa: false,
            cors: true,
        }, context)
        : (0, dev_server_impl_1.default)(options, context);
    const p = context.projectsConfigurations.projects[context.projectName];
    const buildOptions = getBuildOptions(options.buildTarget, context);
    let pathToManifestFile = (0, node_path_1.join)(context.root, p.sourceRoot, 'assets/module-federation.manifest.json');
    if (options.pathToManifestFile) {
        const userPathToManifestFile = (0, node_path_1.join)(context.root, options.pathToManifestFile);
        if (!(0, fs_1.existsSync)(userPathToManifestFile)) {
            throw new Error(`The provided Module Federation manifest file path does not exist. Please check the file exists at "${userPathToManifestFile}".`);
        }
        else if ((0, path_1.extname)(options.pathToManifestFile) !== '.json') {
            throw new Error(`The Module Federation manifest file must be a JSON. Please ensure the file at ${userPathToManifestFile} is a JSON.`);
        }
        pathToManifestFile = userPathToManifestFile;
    }
    if (!options.isInitialHost) {
        return yield* currIter;
    }
    const moduleFederationConfig = (0, module_federation_1.getModuleFederationConfig)(buildOptions.tsConfig, context.root, p.root, 'react');
    const remoteNames = options.devRemotes?.map((r) => typeof r === 'string' ? r : r.remoteName);
    const remotes = (0, module_federation_1.getRemotes)(remoteNames, options.skipRemotes, moduleFederationConfig, {
        projectName: context.projectName,
        projectGraph: context.projectGraph,
        root: context.root,
    }, pathToManifestFile);
    if (remotes.devRemotes.length > 0 && !initialStaticRemotesPorts) {
        options.staticRemotesPort = options.devRemotes.reduce((portToUse, r) => {
            const remoteName = typeof r === 'string' ? r : r.remoteName;
            const remotePort = context.projectGraph.nodes[remoteName].data.targets['serve'].options
                .port;
            if (remotePort >= portToUse) {
                return remotePort + 1;
            }
            else {
                return portToUse;
            }
        }, options.staticRemotesPort);
    }
    const staticRemotesConfig = parseStaticRemotesConfig(remotes.staticRemotes, context);
    await buildStaticRemotes(staticRemotesConfig, nxBin, context, options);
    const devRemoteIters = await startRemotes(remotes.devRemotes, context, options, 'serve');
    const dynamicRemotesIters = await startRemotes(remotes.dynamicRemotes, context, options, 'serve-static');
    const staticRemotesIter = remotes.staticRemotes.length > 0
        ? startStaticRemotesFileServer(staticRemotesConfig, context, options)
        : undefined;
    return yield* (0, async_iterable_1.combineAsyncIterables)(currIter, ...devRemoteIters, ...dynamicRemotesIters, ...(staticRemotesIter ? [staticRemotesIter] : []), (0, async_iterable_1.createAsyncIterable)(async ({ next, done }) => {
        if (!options.isInitialHost) {
            done();
            return;
        }
        if (remotes.remotePorts.length === 0) {
            done();
            return;
        }
        try {
            const host = options.host ?? 'localhost';
            const baseUrl = `http${options.ssl ? 's' : ''}://${host}:${options.port}`;
            const portsToWaitFor = staticRemotesIter
                ? [options.staticRemotesPort, ...remotes.remotePorts]
                : [...remotes.remotePorts];
            await Promise.all(portsToWaitFor.map((port) => (0, wait_for_port_open_1.waitForPortOpen)(port, {
                retries: 480,
                retryDelay: 2500,
                host: host,
            })));
            devkit_1.logger.info(`NX All remotes started, server ready at ${baseUrl}`);
            next({ success: true, baseUrl: baseUrl });
        }
        catch (err) {
            throw new Error(`Failed to start remotes. Check above for any errors.`, {
                cause: err,
            });
        }
        finally {
            done();
        }
    }));
}
exports.default = moduleFederationDevServer;
