{"version":3,"sources":["../../../../packages/vite/plugins/nx-tsconfig-paths.plugin.ts"],"sourcesContent":["import {\n  createProjectGraphAsync,\n  joinPathFragments,\n  stripIndents,\n  workspaceRoot,\n} from '@nx/devkit';\nimport { copyFileSync, existsSync } from 'node:fs';\nimport { relative, join, resolve } from 'node:path';\nimport {\n  loadConfig,\n  createMatchPath,\n  MatchPath,\n  ConfigLoaderSuccessResult,\n} from 'tsconfig-paths';\nimport {\n  calculateProjectBuildableDependencies,\n  createTmpTsConfig,\n} from '@nx/js/src/utils/buildable-libs-utils';\nimport { Plugin } from 'vite';\nimport { nxViteBuildCoordinationPlugin } from './nx-vite-build-coordination.plugin';\n\nexport interface nxViteTsPathsOptions {\n  /**\n   * Enable debug logging\n   * @default false\n   **/\n  debug?: boolean;\n  /**\n   * export fields in package.json to use for resolving\n   * @default [['exports', '.', 'import'], 'module', 'main']\n   *\n   * fallback resolution will use ['main', 'module']\n   **/\n  mainFields?: (string | string[])[];\n  /**\n   * extensions to check when resolving files when package.json resolution fails\n   * @default ['.ts', '.tsx', '.js', '.jsx', '.json', '.mjs', '.cjs']\n   **/\n  extensions?: string[];\n  /**\n   * Inform Nx whether to use the raw source or to use the built output for buildable dependencies.\n   * Set to `false` to use incremental builds.\n   * @default true\n   */\n  buildLibsFromSource?: boolean;\n}\n\nexport function nxViteTsPaths(options: nxViteTsPathsOptions = {}) {\n  let matchTsPathEsm: MatchPath;\n  let matchTsPathFallback: MatchPath | undefined;\n  let tsConfigPathsEsm: ConfigLoaderSuccessResult;\n  let tsConfigPathsFallback: ConfigLoaderSuccessResult;\n\n  options.extensions ??= [\n    '.ts',\n    '.tsx',\n    '.js',\n    '.jsx',\n    '.json',\n    '.mjs',\n    '.cjs',\n  ];\n  options.mainFields ??= [['exports', '.', 'import'], 'module', 'main'];\n  options.buildLibsFromSource ??= true;\n  let projectRoot = '';\n\n  return {\n    name: 'nx-vite-ts-paths',\n    async configResolved(config: any) {\n      projectRoot = config.root;\n      const projectRootFromWorkspaceRoot = relative(workspaceRoot, projectRoot);\n      let foundTsConfigPath = getTsConfig(\n        join(\n          workspaceRoot,\n          'tmp',\n          projectRootFromWorkspaceRoot,\n          process.env.NX_TASK_TARGET_TARGET ?? 'build',\n          'tsconfig.generated.json'\n        )\n      );\n      if (!foundTsConfigPath) {\n        throw new Error(stripIndents`Unable to find a tsconfig in the workspace! \nThere should at least be a tsconfig.base.json or tsconfig.json in the root of the workspace ${workspaceRoot}`);\n      }\n\n      if (!options.buildLibsFromSource && !global.NX_GRAPH_CREATION) {\n        const projectGraph = await createProjectGraphAsync({\n          exitOnError: false,\n          resetDaemonClient: true,\n        });\n        const { dependencies } = calculateProjectBuildableDependencies(\n          undefined,\n          projectGraph,\n          workspaceRoot,\n          process.env.NX_TASK_TARGET_PROJECT,\n          // When using incremental building and the serve target is called\n          // we need to get the deps for the 'build' target instead.\n          process.env.NX_TASK_TARGET_TARGET === 'serve'\n            ? 'build'\n            : process.env.NX_TASK_TARGET_TARGET,\n          process.env.NX_TASK_TARGET_CONFIGURATION\n        );\n        // This tsconfig is used via the Vite ts paths plugin.\n        // It can be also used by other user-defined Vite plugins (e.g. for creating type declaration files).\n        foundTsConfigPath = createTmpTsConfig(\n          foundTsConfigPath,\n          workspaceRoot,\n          relative(workspaceRoot, projectRoot),\n          dependencies\n        );\n\n        if (config.command === 'serve') {\n          const buildableLibraryDependencies = dependencies\n            .filter((dep) => dep.node.type === 'lib')\n            .map((dep) => dep.node.name)\n            .join(',');\n          const buildCommand = `npx nx run-many --target=${process.env.NX_TASK_TARGET_TARGET} --projects=${buildableLibraryDependencies}`;\n          config.plugins.push(nxViteBuildCoordinationPlugin({ buildCommand }));\n        }\n      }\n\n      const parsed = loadConfig(foundTsConfigPath);\n\n      logIt('first parsed tsconfig: ', parsed);\n      if (parsed.resultType === 'failed') {\n        throw new Error(`Failed loading tsonfig at ${foundTsConfigPath}`);\n      }\n      tsConfigPathsEsm = parsed;\n\n      matchTsPathEsm = createMatchPath(\n        parsed.absoluteBaseUrl,\n        parsed.paths,\n        options.mainFields\n      );\n\n      const rootLevelTsConfig = getTsConfig(\n        join(workspaceRoot, 'tsconfig.base.json')\n      );\n      const rootLevelParsed = loadConfig(rootLevelTsConfig);\n      logIt('fallback parsed tsconfig: ', rootLevelParsed);\n      if (rootLevelParsed.resultType === 'success') {\n        tsConfigPathsFallback = rootLevelParsed;\n        matchTsPathFallback = createMatchPath(\n          rootLevelParsed.absoluteBaseUrl,\n          rootLevelParsed.paths,\n          ['main', 'module']\n        );\n      }\n    },\n    resolveId(importPath: string) {\n      let resolvedFile: string;\n      try {\n        resolvedFile = matchTsPathEsm(importPath);\n      } catch (e) {\n        logIt('Using fallback path matching.');\n        resolvedFile = matchTsPathFallback?.(importPath);\n      }\n\n      if (!resolvedFile) {\n        if (tsConfigPathsEsm || tsConfigPathsFallback) {\n          logIt(\n            `Unable to resolve ${importPath} with tsconfig paths. Using fallback file matching.`\n          );\n          resolvedFile =\n            loadFileFromPaths(tsConfigPathsEsm, importPath) ||\n            loadFileFromPaths(tsConfigPathsFallback, importPath);\n        } else {\n          logIt(`Unable to resolve ${importPath} with tsconfig paths`);\n        }\n      }\n\n      logIt(`Resolved ${importPath} to ${resolvedFile}`);\n      // Returning null defers to other resolveId functions and eventually the default resolution behavior\n      // https://rollupjs.org/plugin-development/#resolveid\n      return resolvedFile || null;\n    },\n    async writeBundle(options) {\n      const outDir = options.dir || 'dist';\n      const src = resolve(projectRoot, 'package.json');\n      if (existsSync(src)) {\n        const dest = join(outDir, 'package.json');\n\n        try {\n          copyFileSync(src, dest);\n        } catch (err) {\n          console.error('Error copying package.json:', err);\n        }\n      }\n    },\n  } as Plugin;\n\n  function getTsConfig(preferredTsConfigPath: string): string {\n    return [\n      resolve(preferredTsConfigPath),\n      resolve(join(workspaceRoot, 'tsconfig.base.json')),\n      resolve(join(workspaceRoot, 'tsconfig.json')),\n    ].find((tsPath) => {\n      if (existsSync(tsPath)) {\n        logIt('Found tsconfig at', tsPath);\n        return tsPath;\n      }\n    });\n  }\n\n  function logIt(...msg: any[]) {\n    if (process.env.NX_VERBOSE_LOGGING === 'true' || options?.debug) {\n      console.debug('\\n[Nx Vite TsPaths]', ...msg);\n    }\n  }\n\n  function loadFileFromPaths(\n    tsconfig: ConfigLoaderSuccessResult,\n    importPath: string\n  ) {\n    logIt(\n      `Trying to resolve file from config in ${tsconfig.configFileAbsolutePath}`\n    );\n    let resolvedFile: string;\n    for (const alias in tsconfig.paths) {\n      const paths = tsconfig.paths[alias];\n\n      const normalizedImport = alias.replace(/\\/\\*$/, '');\n\n      if (importPath.startsWith(normalizedImport)) {\n        const joinedPath = joinPathFragments(\n          tsconfig.absoluteBaseUrl,\n          paths[0].replace(/\\/\\*$/, '')\n        );\n\n        resolvedFile = findFile(\n          importPath.replace(normalizedImport, joinedPath)\n        );\n      }\n    }\n\n    return resolvedFile;\n  }\n\n  function findFile(path: string): string {\n    for (const ext of options.extensions) {\n      const resolvedPath = resolve(path + ext);\n      if (existsSync(resolvedPath)) {\n        return resolvedPath;\n      }\n\n      const resolvedIndexPath = resolve(path, `index${ext}`);\n      if (existsSync(resolvedIndexPath)) {\n        return resolvedIndexPath;\n      }\n    }\n  }\n}\n"],"names":["nxViteTsPaths","options","matchTsPathEsm","matchTsPathFallback","tsConfigPathsEsm","tsConfigPathsFallback","extensions","mainFields","buildLibsFromSource","projectRoot","name","configResolved","config","root","projectRootFromWorkspaceRoot","relative","workspaceRoot","process","foundTsConfigPath","getTsConfig","join","env","NX_TASK_TARGET_TARGET","Error","stripIndents","global","NX_GRAPH_CREATION","projectGraph","createProjectGraphAsync","exitOnError","resetDaemonClient","dependencies","calculateProjectBuildableDependencies","undefined","NX_TASK_TARGET_PROJECT","NX_TASK_TARGET_CONFIGURATION","createTmpTsConfig","command","buildableLibraryDependencies","filter","dep","node","type","map","buildCommand","plugins","push","nxViteBuildCoordinationPlugin","parsed","loadConfig","logIt","resultType","createMatchPath","absoluteBaseUrl","paths","rootLevelTsConfig","rootLevelParsed","resolveId","importPath","resolvedFile","e","loadFileFromPaths","writeBundle","outDir","dir","src","resolve","existsSync","dest","copyFileSync","err","console","error","preferredTsConfigPath","find","tsPath","msg","NX_VERBOSE_LOGGING","debug","tsconfig","configFileAbsolutePath","alias","normalizedImport","replace","startsWith","joinedPath","joinPathFragments","findFile","path","ext","resolvedPath","resolvedIndexPath"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}