{"version":3,"sources":["../../../../../../packages/vite/src/executors/preview-server/preview-server.impl.ts"],"sourcesContent":["import {\n  ExecutorContext,\n  joinPathFragments,\n  offsetFromRoot,\n  parseTargetString,\n  runExecutor,\n} from '@nx/devkit';\nimport {\n  getNxTargetOptions,\n  getProxyConfig,\n  normalizeViteConfigFilePath,\n} from '../../utils/options-utils';\nimport { ViteBuildExecutorOptions } from '../build/schema';\nimport { VitePreviewServerExecutorOptions } from './schema';\nimport { relative } from 'path';\nimport { getBuildExtraArgs } from '../build/build.impl';\nimport { loadViteDynamicImport } from '../../utils/executor-utils';\n\nexport async function* vitePreviewServerExecutor(\n  options: VitePreviewServerExecutorOptions,\n  context: ExecutorContext\n) {\n  process.env.VITE_CJS_IGNORE_WARNING = 'true';\n  // Allows ESM to be required in CJS modules. Vite will be published as ESM in the future.\n  const { mergeConfig, preview, loadConfigFromFile } =\n    await loadViteDynamicImport();\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n  const target = parseTargetString(options.buildTarget, context);\n  const targetConfiguration =\n    context.projectsConfigurations.projects[target.project]?.targets[\n      target.target\n    ];\n  if (!targetConfiguration) {\n    throw new Error(`Invalid buildTarget: ${options.buildTarget}`);\n  }\n\n  const isCustomBuildTarget =\n    targetConfiguration.executor !== '@nx/vite:build' &&\n    targetConfiguration.executor !== '@nrwl/vite:build';\n\n  // Retrieve the option for the configured buildTarget.\n  const buildTargetOptions: ViteBuildExecutorOptions = getNxTargetOptions(\n    options.buildTarget,\n    context\n  );\n\n  const { configuration } = parseTargetString(options.buildTarget, context);\n\n  const viteConfigPath = normalizeViteConfigFilePath(\n    context.root,\n    projectRoot,\n    buildTargetOptions.configFile\n  );\n\n  const { buildOptions, otherOptions: otherOptionsFromBuild } =\n    await getBuildExtraArgs(buildTargetOptions);\n\n  const { previewOptions, otherOptions } = await getExtraArgs(\n    options,\n    configuration,\n    otherOptionsFromBuild\n  );\n  const resolved = await loadConfigFromFile(\n    {\n      mode: otherOptions?.mode ?? otherOptionsFromBuild?.mode ?? 'production',\n      command: 'build',\n    },\n    viteConfigPath\n  );\n\n  const outDir =\n    options.staticFilePath ??\n    joinPathFragments(\n      offsetFromRoot(projectRoot),\n      buildTargetOptions.outputPath\n    ) ??\n    resolved?.config?.build?.outDir;\n\n  if (!outDir) {\n    throw new Error(\n      `Could not infer the \"outputPath\" or \"outDir\". It should be set in your vite.config.ts, or as a property of the \"${options.buildTarget}\" buildTarget or provided explicitly as a \"staticFilePath\" option.`\n    );\n  }\n  const root =\n    projectRoot === '.'\n      ? process.cwd()\n      : relative(context.cwd, joinPathFragments(context.root, projectRoot));\n\n  // Merge the options from the build and preview-serve targets.\n  // The latter takes precedence.\n  const mergedOptions = {\n    ...{ watch: {} },\n    build: {\n      outDir,\n      ...(isCustomBuildTarget ? {} : buildOptions),\n    },\n    ...(isCustomBuildTarget ? {} : otherOptionsFromBuild),\n    ...otherOptions,\n    preview: {\n      ...getProxyConfig(context, otherOptions.proxyConfig),\n      ...previewOptions,\n    },\n  };\n\n  // vite InlineConfig\n  const serverConfig = mergeConfig(\n    {\n      // This should not be needed as it's going to be set in vite.config.ts\n      // but leaving it here in case someone did not migrate correctly\n      root: resolved.config.root ?? root,\n      configFile: viteConfigPath,\n    },\n    {\n      ...mergedOptions,\n    }\n  );\n\n  if (serverConfig.mode === 'production') {\n    console.warn('WARNING: preview is not meant to be run in production!');\n  }\n\n  // vite PreviewServer\n  let server: Record<string, any> | undefined;\n\n  const processOnExit = async () => {\n    await closeServer(server);\n  };\n\n  process.once('SIGINT', processOnExit);\n  process.once('SIGTERM', processOnExit);\n  process.once('exit', processOnExit);\n\n  // Launch the build target.\n  // If customBuildTarget is set to true, do not provide any overrides to it\n  const buildTargetOverrides = isCustomBuildTarget ? {} : mergedOptions;\n  const build = await runExecutor(target, buildTargetOverrides, context);\n\n  for await (const result of build) {\n    if (result.success) {\n      try {\n        if (!server) {\n          server = await preview(serverConfig);\n        }\n        server.printUrls();\n\n        const resolvedUrls = [\n          ...server.resolvedUrls.local,\n          ...server.resolvedUrls.network,\n        ];\n\n        yield {\n          success: true,\n          baseUrl: resolvedUrls[0] ?? '',\n        };\n      } catch (e) {\n        console.error(e);\n        yield {\n          success: false,\n          baseUrl: '',\n        };\n      }\n    } else {\n      yield {\n        success: false,\n        baseUrl: '',\n      };\n    }\n  }\n\n  await new Promise<void>((resolve) => {\n    process.once('SIGINT', () => resolve());\n    process.once('SIGTERM', () => resolve());\n    process.once('exit', () => resolve());\n  });\n}\n\nfunction closeServer(server?: Record<string, any>): Promise<void> {\n  return new Promise((resolve) => {\n    if (!server) {\n      resolve();\n    } else {\n      const { httpServer } = server;\n      if (httpServer['closeAllConnections']) {\n        // https://github.com/vitejs/vite/pull/14834\n        // closeAllConnections was added in Node v18.2.0\n        // typically is \"as http.Server\" but no reason\n        // to import http just for this\n        (httpServer as any).closeAllConnections();\n      }\n      httpServer.close(() => resolve());\n    }\n  });\n}\n\nexport default vitePreviewServerExecutor;\n\nasync function getExtraArgs(\n  options: VitePreviewServerExecutorOptions,\n  configuration: string | undefined,\n  otherOptionsFromBuildTarget: Record<string, unknown> | undefined\n): Promise<{\n  // vite PreviewOptions\n  previewOptions: Record<string, any>;\n  otherOptions: Record<string, any>;\n}> {\n  // support passing extra args to vite cli\n  const schema = await import('./schema.json');\n  const extraArgs = {};\n  for (const key of Object.keys(options)) {\n    if (!schema.properties[key]) {\n      extraArgs[key] = options[key];\n    }\n  }\n\n  const previewOptions = {};\n  const previewSchemaKeys = [\n    'port',\n    'strictPort',\n    'host',\n    'https',\n    'open',\n    'proxy',\n    'cors',\n    'headers',\n  ];\n\n  let otherOptions = {};\n  for (const key of Object.keys(extraArgs)) {\n    if (previewSchemaKeys.includes(key)) {\n      previewOptions[key] = extraArgs[key];\n    } else {\n      otherOptions[key] = extraArgs[key];\n    }\n  }\n\n  if (configuration) {\n    otherOptions = {\n      ...otherOptions,\n      ...(otherOptionsFromBuildTarget ?? {}),\n    };\n  }\n\n  return {\n    previewOptions,\n    otherOptions,\n  };\n}\n"],"names":["vitePreviewServerExecutor","options","context","resolved","process","env","VITE_CJS_IGNORE_WARNING","mergeConfig","preview","loadConfigFromFile","loadViteDynamicImport","projectRoot","projectsConfigurations","projects","projectName","root","target","parseTargetString","buildTarget","targetConfiguration","project","targets","Error","isCustomBuildTarget","executor","buildTargetOptions","getNxTargetOptions","configuration","viteConfigPath","normalizeViteConfigFilePath","configFile","buildOptions","otherOptions","otherOptionsFromBuild","getBuildExtraArgs","previewOptions","getExtraArgs","mode","command","outDir","staticFilePath","joinPathFragments","offsetFromRoot","outputPath","config","build","cwd","relative","mergedOptions","watch","getProxyConfig","proxyConfig","serverConfig","console","warn","server","processOnExit","closeServer","once","buildTargetOverrides","runExecutor","result","success","printUrls","resolvedUrls","local","network","baseUrl","e","error","Promise","resolve","httpServer","closeAllConnections","close","otherOptionsFromBuildTarget","schema","extraArgs","key","Object","keys","properties","previewSchemaKeys","includes"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}