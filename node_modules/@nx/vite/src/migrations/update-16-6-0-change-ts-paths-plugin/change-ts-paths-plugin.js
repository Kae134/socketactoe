"use strict";
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return update;
    }
});
const _devkit = require("@nx/devkit");
const _executoroptionsutils = require("@nx/devkit/src/generators/executor-options-utils");
const _tsquery = require("@phenomnomnominal/tsquery");
const _findviteconfig = require("../../utils/find-vite-config");
function update(tree) {
    const projects = (0, _devkit.getProjects)(tree);
    (0, _executoroptionsutils.forEachExecutorOptions)(tree, '@nx/vite:build', (options, projectName)=>{
        var _oldTsConfigPathPlugin__importClause_name, _oldTsConfigPathPlugin__importClause, _oldTsConfigPathPlugin_;
        const projectConfig = projects.get(projectName);
        const config = options.configFile || (0, _findviteconfig.findViteConfig)(tree, projectConfig.root);
        if (!config || !tree.exists(config)) {
            return;
        }
        const configContents = tree.read(config, 'utf-8');
        var _tsquery_query;
        const oldTsConfigPathPlugin = (_tsquery_query = _tsquery.tsquery.query(configContents, 'ImportDeclaration:has(StringLiteral[value="vite-tsconfig-paths"])')) != null ? _tsquery_query : [];
        if (oldTsConfigPathPlugin.length === 0) {
            return;
        }
        var _oldTsConfigPathPlugin__importClause_name_text;
        const importName = (_oldTsConfigPathPlugin__importClause_name_text = (_oldTsConfigPathPlugin_ = oldTsConfigPathPlugin[0]) == null ? void 0 : (_oldTsConfigPathPlugin__importClause = _oldTsConfigPathPlugin_['importClause']) == null ? void 0 : (_oldTsConfigPathPlugin__importClause_name = _oldTsConfigPathPlugin__importClause.name) == null ? void 0 : _oldTsConfigPathPlugin__importClause_name.text) != null ? _oldTsConfigPathPlugin__importClause_name_text : 'viteTsConfigPaths';
        const updatedContent = _tsquery.tsquery.replace(configContents, `PropertyAssignment:has(Identifier[name="plugins"]) CallExpression:has(Identifier[name="${importName}"])`, ()=>{
            return `nxViteTsPaths()`;
        });
        const withImportChange = _tsquery.tsquery.replace(updatedContent, 'ImportDeclaration:has(StringLiteral[value="vite-tsconfig-paths"])', ()=>{
            return "import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';";
        });
        tree.write(config, withImportChange);
    });
}

//# sourceMappingURL=change-ts-paths-plugin.js.map