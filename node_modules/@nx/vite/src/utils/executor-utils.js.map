{"version":3,"sources":["../../../../../packages/vite/src/utils/executor-utils.ts"],"sourcesContent":["import { printDiagnostics, runTypeCheck } from '@nx/js';\nimport { join } from 'path';\nimport { ViteBuildExecutorOptions } from '../executors/build/schema';\nimport { ExecutorContext } from '@nx/devkit';\nimport { ViteDevServerExecutorOptions } from '../executors/dev-server/schema';\nimport {\n  calculateProjectBuildableDependencies,\n  createTmpTsConfig,\n} from '@nx/js/src/utils/buildable-libs-utils';\nimport { getProjectTsConfigPath } from './options-utils';\n\nexport async function validateTypes(opts: {\n  workspaceRoot: string;\n  projectRoot: string;\n  tsconfig: string;\n}): Promise<void> {\n  const result = await runTypeCheck({\n    workspaceRoot: opts.workspaceRoot,\n    tsConfigPath: join(opts.workspaceRoot, opts.tsconfig),\n    mode: 'noEmit',\n  });\n\n  await printDiagnostics(result.errors, result.warnings);\n\n  if (result.errors.length > 0) {\n    throw new Error('Found type errors. See above.');\n  }\n}\n\nexport function createBuildableTsConfig(\n  projectRoot: string,\n  options: ViteBuildExecutorOptions | ViteDevServerExecutorOptions,\n  context: ExecutorContext\n) {\n  const tsConfig = getProjectTsConfigPath(projectRoot);\n  options['buildLibsFromSource'] ??= true;\n\n  if (!options['buildLibsFromSource']) {\n    const { dependencies } = calculateProjectBuildableDependencies(\n      context.taskGraph,\n      context.projectGraph,\n      context.root,\n      context.projectName,\n      // When using incremental building and the serve target is called\n      // we need to get the deps for the 'build' target instead.\n      context.targetName === 'serve' ? 'build' : context.targetName,\n      context.configurationName\n    );\n    // This tsconfig is used via the Vite ts paths plugin.\n    // It can be also used by other user-defined Vite plugins (e.g. for creating type declaration files).\n    const tmpTsConfigPath = createTmpTsConfig(\n      tsConfig,\n      context.root,\n      projectRoot,\n      dependencies\n    );\n    process.env.NX_TSCONFIG_PATH = tmpTsConfigPath;\n  }\n}\n\nexport function loadViteDynamicImport() {\n  return Function('return import(\"vite\")')() as Promise<typeof import('vite')>;\n}\n\nexport function loadVitestDynamicImport() {\n  return Function('return import(\"vitest/node\")')() as Promise<\n    typeof import('vitest/node')\n  >;\n}\n"],"names":["createBuildableTsConfig","loadViteDynamicImport","loadVitestDynamicImport","validateTypes","opts","result","runTypeCheck","workspaceRoot","tsConfigPath","join","tsconfig","mode","printDiagnostics","errors","warnings","length","Error","projectRoot","options","context","tsConfig","getProjectTsConfigPath","dependencies","calculateProjectBuildableDependencies","taskGraph","projectGraph","root","projectName","targetName","configurationName","tmpTsConfigPath","createTmpTsConfig","process","env","NX_TSCONFIG_PATH","Function"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;IA6BgBA,uBAAuB;eAAvBA;;IA+BAC,qBAAqB;eAArBA;;IAIAC,uBAAuB;eAAvBA;;IArDMC,aAAa;eAAbA;;;oBAXyB;sBAC1B;oCAOd;8BACgC;AAEhC,eAAeA,cAAcC,IAInC;IACC,MAAMC,SAAS,MAAMC,IAAAA,gBAAY,EAAC;QAChCC,eAAeH,KAAKG,aAAa;QACjCC,cAAcC,IAAAA,UAAI,EAACL,KAAKG,aAAa,EAAEH,KAAKM,QAAQ;QACpDC,MAAM;IACR;IAEA,MAAMC,IAAAA,oBAAgB,EAACP,OAAOQ,MAAM,EAAER,OAAOS,QAAQ;IAErD,IAAIT,OAAOQ,MAAM,CAACE,MAAM,GAAG,GAAG;QAC5B,MAAM,IAAIC,MAAM;IAClB;AACF;AAEO,SAAShB,wBACdiB,WAAmB,EACnBC,OAAgE,EAChEC,OAAwB;QAGxBD,UAAQ;IADR,MAAME,WAAWC,IAAAA,oCAAsB,EAACJ;;IACxCC,MAAAA,WAAAA,QAAO,CAAC,uBAAA,sBAAsB,gBAA9BA,QAAO,CAAC,qBAAsB,GAAK;IAEnC,IAAI,CAACA,OAAO,CAAC,sBAAsB,EAAE;QACnC,MAAM,EAAEI,YAAY,EAAE,GAAGC,IAAAA,yDAAqC,EAC5DJ,QAAQK,SAAS,EACjBL,QAAQM,YAAY,EACpBN,QAAQO,IAAI,EACZP,QAAQQ,WAAW,EACnB,iEAAiE;QACjE,0DAA0D;QAC1DR,QAAQS,UAAU,KAAK,UAAU,UAAUT,QAAQS,UAAU,EAC7DT,QAAQU,iBAAiB;QAE3B,sDAAsD;QACtD,qGAAqG;QACrG,MAAMC,kBAAkBC,IAAAA,qCAAiB,EACvCX,UACAD,QAAQO,IAAI,EACZT,aACAK;QAEFU,QAAQC,GAAG,CAACC,gBAAgB,GAAGJ;IACjC;AACF;AAEO,SAAS7B;IACd,OAAOkC,SAAS;AAClB;AAEO,SAASjC;IACd,OAAOiC,SAAS;AAGlB"}