"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    vitestGenerator: function() {
        return vitestGenerator;
    },
    vitestGeneratorInternal: function() {
        return vitestGeneratorInternal;
    }
});
const _extends = require("@swc/helpers/_/_extends");
const _devkit = require("@nx/devkit");
const _generatorutils = require("../../utils/generator-utils");
const _init = require("../init/init");
const _versions = require("../../utils/versions");
const _js = require("@nx/js");
const _path = require("path");
const _ensuredependencies = require("../../utils/ensure-dependencies");
function vitestGenerator(tree, schema, hasPlugin = false) {
    return vitestGeneratorInternal(tree, _extends._({
        addPlugin: false
    }, schema), hasPlugin);
}
async function vitestGeneratorInternal(tree, schema, hasPlugin = false) {
    var _nxJson_plugins;
    const tasks = [];
    const { root, projectType } = (0, _devkit.readProjectConfiguration)(tree, schema.project);
    const isRootProject = root === '.';
    tasks.push(await (0, _js.initGenerator)(tree, _extends._({}, schema, {
        skipFormat: true
    })));
    const initTask = await (0, _init.default)(tree, {
        skipFormat: true,
        addPlugin: schema.addPlugin
    });
    tasks.push(initTask);
    tasks.push((0, _ensuredependencies.ensureDependencies)(tree, schema));
    const nxJson = (0, _devkit.readNxJson)(tree);
    const hasPluginCheck = (_nxJson_plugins = nxJson.plugins) == null ? void 0 : _nxJson_plugins.some((p)=>(typeof p === 'string' ? p === '@nx/vite/plugin' : p.plugin === '@nx/vite/plugin') || hasPlugin);
    if (!hasPluginCheck) {
        var _schema_testTarget;
        const testTarget = (_schema_testTarget = schema.testTarget) != null ? _schema_testTarget : 'test';
        (0, _generatorutils.addOrChangeTestTarget)(tree, schema, testTarget);
    }
    if (!schema.skipViteConfig) {
        if (schema.uiFramework === 'react') {
            (0, _generatorutils.createOrEditViteConfig)(tree, {
                project: schema.project,
                includeLib: projectType === 'library',
                includeVitest: true,
                inSourceTests: schema.inSourceTests,
                rollupOptionsExternal: [
                    "'react'",
                    "'react-dom'",
                    "'react/jsx-runtime'"
                ],
                imports: [
                    `import react from '@vitejs/plugin-react'`
                ],
                plugins: [
                    'react()'
                ],
                coverageProvider: schema.coverageProvider
            }, true);
        } else {
            (0, _generatorutils.createOrEditViteConfig)(tree, _extends._({}, schema, {
                includeVitest: true,
                includeLib: projectType === 'library'
            }), true);
        }
    }
    createFiles(tree, schema, root);
    updateTsConfig(tree, schema, root);
    const coverageProviderDependency = getCoverageProviderDependency(schema.coverageProvider);
    const installCoverageProviderTask = (0, _devkit.addDependenciesToPackageJson)(tree, {}, coverageProviderDependency);
    tasks.push(installCoverageProviderTask);
    // Setup workspace config file (https://vitest.dev/guide/workspace.html)
    if (!isRootProject && !tree.exists(`vitest.workspace.ts`) && !tree.exists(`vitest.workspace.js`) && !tree.exists(`vitest.workspace.json`) && !tree.exists(`vitest.projects.ts`) && !tree.exists(`vitest.projects.js`) && !tree.exists(`vitest.projects.json`)) {
        tree.write('vitest.workspace.ts', `export default ['**/*/vite.config.ts', '**/*/vitest.config.ts'];`);
    }
    if (!schema.skipFormat) {
        await (0, _devkit.formatFiles)(tree);
    }
    return (0, _devkit.runTasksInSerial)(...tasks);
}
function updateTsConfig(tree, options, projectRoot) {
    if (tree.exists((0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.spec.json'))) {
        (0, _devkit.updateJson)(tree, (0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.spec.json'), (json)=>{
            var _json_compilerOptions_types, _json_compilerOptions;
            if (!((_json_compilerOptions = json.compilerOptions) == null ? void 0 : (_json_compilerOptions_types = _json_compilerOptions.types) == null ? void 0 : _json_compilerOptions_types.includes('vitest'))) {
                var _json_compilerOptions1;
                if ((_json_compilerOptions1 = json.compilerOptions) == null ? void 0 : _json_compilerOptions1.types) {
                    json.compilerOptions.types.push('vitest');
                } else {
                    var _json;
                    var _compilerOptions;
                    (_compilerOptions = (_json = json).compilerOptions) != null ? _compilerOptions : _json.compilerOptions = {};
                    json.compilerOptions.types = [
                        'vitest'
                    ];
                }
            }
            return json;
        });
        (0, _devkit.updateJson)(tree, (0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.json'), (json)=>{
            if (json.references && !json.references.some((r)=>r.path === './tsconfig.spec.json')) {
                json.references.push({
                    path: './tsconfig.spec.json'
                });
            }
            return json;
        });
    } else {
        (0, _devkit.updateJson)(tree, (0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.json'), (json)=>{
            var _json_compilerOptions_types, _json_compilerOptions;
            if (!((_json_compilerOptions = json.compilerOptions) == null ? void 0 : (_json_compilerOptions_types = _json_compilerOptions.types) == null ? void 0 : _json_compilerOptions_types.includes('vitest'))) {
                var _json_compilerOptions1;
                if ((_json_compilerOptions1 = json.compilerOptions) == null ? void 0 : _json_compilerOptions1.types) {
                    json.compilerOptions.types.push('vitest');
                } else {
                    var _json;
                    var _compilerOptions;
                    (_compilerOptions = (_json = json).compilerOptions) != null ? _compilerOptions : _json.compilerOptions = {};
                    json.compilerOptions.types = [
                        'vitest'
                    ];
                }
            }
            return json;
        });
    }
    if (options.inSourceTests) {
        const tsconfigLibPath = (0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.lib.json');
        const tsconfigAppPath = (0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.app.json');
        if (tree.exists(tsconfigLibPath)) {
            (0, _devkit.updateJson)(tree, (0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.lib.json'), (json)=>{
                var _json_compilerOptions;
                var _types;
                ((_types = (_json_compilerOptions = json.compilerOptions).types) != null ? _types : _json_compilerOptions.types = []).push('vitest/importMeta');
                return json;
            });
        } else if (tree.exists(tsconfigAppPath)) {
            (0, _devkit.updateJson)(tree, (0, _devkit.joinPathFragments)(projectRoot, 'tsconfig.app.json'), (json)=>{
                var _json_compilerOptions;
                var _types;
                ((_types = (_json_compilerOptions = json.compilerOptions).types) != null ? _types : _json_compilerOptions.types = []).push('vitest/importMeta');
                return json;
            });
        }
        (0, _js.addTsLibDependencies)(tree);
    }
}
function createFiles(tree, options, projectRoot) {
    (0, _devkit.generateFiles)(tree, (0, _path.join)(__dirname, 'files'), projectRoot, _extends._({
        tmpl: ''
    }, options, {
        projectRoot,
        offsetFromRoot: (0, _devkit.offsetFromRoot)(projectRoot)
    }));
}
function getCoverageProviderDependency(coverageProvider) {
    switch(coverageProvider){
        case 'v8':
            return {
                '@vitest/coverage-v8': _versions.vitestCoverageV8Version
            };
        case 'istanbul':
            return {
                '@vitest/coverage-istanbul': _versions.vitestCoverageIstanbulVersion
            };
        default:
            return {
                '@vitest/coverage-v8': _versions.vitestCoverageV8Version
            };
    }
}
const _default = vitestGenerator;

//# sourceMappingURL=vitest-generator.js.map