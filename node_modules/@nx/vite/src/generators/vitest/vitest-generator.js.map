{"version":3,"sources":["../../../../../../packages/vite/src/generators/vitest/vitest-generator.ts"],"sourcesContent":["import {\n  addDependenciesToPackageJson,\n  formatFiles,\n  generateFiles,\n  GeneratorCallback,\n  joinPathFragments,\n  offsetFromRoot,\n  readNxJson,\n  readProjectConfiguration,\n  runTasksInSerial,\n  Tree,\n  updateJson,\n} from '@nx/devkit';\nimport {\n  addOrChangeTestTarget,\n  createOrEditViteConfig,\n} from '../../utils/generator-utils';\nimport { VitestGeneratorSchema } from './schema';\n\nimport initGenerator from '../init/init';\nimport {\n  vitestCoverageIstanbulVersion,\n  vitestCoverageV8Version,\n} from '../../utils/versions';\n\nimport { addTsLibDependencies, initGenerator as jsInitGenerator } from '@nx/js';\nimport { join } from 'path';\nimport { ensureDependencies } from '../../utils/ensure-dependencies';\n\nexport function vitestGenerator(\n  tree: Tree,\n  schema: VitestGeneratorSchema,\n  hasPlugin = false\n) {\n  return vitestGeneratorInternal(\n    tree,\n    { addPlugin: false, ...schema },\n    hasPlugin\n  );\n}\n\nexport async function vitestGeneratorInternal(\n  tree: Tree,\n  schema: VitestGeneratorSchema,\n  hasPlugin = false\n) {\n  const tasks: GeneratorCallback[] = [];\n\n  const { root, projectType } = readProjectConfiguration(tree, schema.project);\n  const isRootProject = root === '.';\n\n  tasks.push(await jsInitGenerator(tree, { ...schema, skipFormat: true }));\n  const initTask = await initGenerator(tree, {\n    skipFormat: true,\n    addPlugin: schema.addPlugin,\n  });\n  tasks.push(initTask);\n  tasks.push(ensureDependencies(tree, schema));\n\n  const nxJson = readNxJson(tree);\n  const hasPluginCheck = nxJson.plugins?.some(\n    (p) =>\n      (typeof p === 'string'\n        ? p === '@nx/vite/plugin'\n        : p.plugin === '@nx/vite/plugin') || hasPlugin\n  );\n  if (!hasPluginCheck) {\n    const testTarget = schema.testTarget ?? 'test';\n    addOrChangeTestTarget(tree, schema, testTarget);\n  }\n\n  if (!schema.skipViteConfig) {\n    if (schema.uiFramework === 'react') {\n      createOrEditViteConfig(\n        tree,\n        {\n          project: schema.project,\n          includeLib: projectType === 'library',\n          includeVitest: true,\n          inSourceTests: schema.inSourceTests,\n          rollupOptionsExternal: [\n            \"'react'\",\n            \"'react-dom'\",\n            \"'react/jsx-runtime'\",\n          ],\n          imports: [`import react from '@vitejs/plugin-react'`],\n          plugins: ['react()'],\n          coverageProvider: schema.coverageProvider,\n        },\n        true\n      );\n    } else {\n      createOrEditViteConfig(\n        tree,\n        {\n          ...schema,\n          includeVitest: true,\n          includeLib: projectType === 'library',\n        },\n        true\n      );\n    }\n  }\n\n  createFiles(tree, schema, root);\n  updateTsConfig(tree, schema, root);\n\n  const coverageProviderDependency = getCoverageProviderDependency(\n    schema.coverageProvider\n  );\n\n  const installCoverageProviderTask = addDependenciesToPackageJson(\n    tree,\n    {},\n    coverageProviderDependency\n  );\n  tasks.push(installCoverageProviderTask);\n\n  // Setup workspace config file (https://vitest.dev/guide/workspace.html)\n  if (\n    !isRootProject &&\n    !tree.exists(`vitest.workspace.ts`) &&\n    !tree.exists(`vitest.workspace.js`) &&\n    !tree.exists(`vitest.workspace.json`) &&\n    !tree.exists(`vitest.projects.ts`) &&\n    !tree.exists(`vitest.projects.js`) &&\n    !tree.exists(`vitest.projects.json`)\n  ) {\n    tree.write(\n      'vitest.workspace.ts',\n      `export default ['**/*/vite.config.ts', '**/*/vitest.config.ts'];`\n    );\n  }\n\n  if (!schema.skipFormat) {\n    await formatFiles(tree);\n  }\n\n  return runTasksInSerial(...tasks);\n}\n\nfunction updateTsConfig(\n  tree: Tree,\n  options: VitestGeneratorSchema,\n  projectRoot: string\n) {\n  if (tree.exists(joinPathFragments(projectRoot, 'tsconfig.spec.json'))) {\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.spec.json'),\n      (json) => {\n        if (!json.compilerOptions?.types?.includes('vitest')) {\n          if (json.compilerOptions?.types) {\n            json.compilerOptions.types.push('vitest');\n          } else {\n            json.compilerOptions ??= {};\n            json.compilerOptions.types = ['vitest'];\n          }\n        }\n        return json;\n      }\n    );\n\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.json'),\n      (json) => {\n        if (\n          json.references &&\n          !json.references.some((r) => r.path === './tsconfig.spec.json')\n        ) {\n          json.references.push({\n            path: './tsconfig.spec.json',\n          });\n        }\n        return json;\n      }\n    );\n  } else {\n    updateJson(\n      tree,\n      joinPathFragments(projectRoot, 'tsconfig.json'),\n      (json) => {\n        if (!json.compilerOptions?.types?.includes('vitest')) {\n          if (json.compilerOptions?.types) {\n            json.compilerOptions.types.push('vitest');\n          } else {\n            json.compilerOptions ??= {};\n            json.compilerOptions.types = ['vitest'];\n          }\n        }\n        return json;\n      }\n    );\n  }\n\n  if (options.inSourceTests) {\n    const tsconfigLibPath = joinPathFragments(projectRoot, 'tsconfig.lib.json');\n    const tsconfigAppPath = joinPathFragments(projectRoot, 'tsconfig.app.json');\n    if (tree.exists(tsconfigLibPath)) {\n      updateJson(\n        tree,\n        joinPathFragments(projectRoot, 'tsconfig.lib.json'),\n        (json) => {\n          (json.compilerOptions.types ??= []).push('vitest/importMeta');\n          return json;\n        }\n      );\n    } else if (tree.exists(tsconfigAppPath)) {\n      updateJson(\n        tree,\n        joinPathFragments(projectRoot, 'tsconfig.app.json'),\n        (json) => {\n          (json.compilerOptions.types ??= []).push('vitest/importMeta');\n          return json;\n        }\n      );\n    }\n\n    addTsLibDependencies(tree);\n  }\n}\n\nfunction createFiles(\n  tree: Tree,\n  options: VitestGeneratorSchema,\n  projectRoot: string\n) {\n  generateFiles(tree, join(__dirname, 'files'), projectRoot, {\n    tmpl: '',\n    ...options,\n    projectRoot,\n    offsetFromRoot: offsetFromRoot(projectRoot),\n  });\n}\n\nfunction getCoverageProviderDependency(\n  coverageProvider: VitestGeneratorSchema['coverageProvider']\n) {\n  switch (coverageProvider) {\n    case 'v8':\n      return {\n        '@vitest/coverage-v8': vitestCoverageV8Version,\n      };\n    case 'istanbul':\n      return {\n        '@vitest/coverage-istanbul': vitestCoverageIstanbulVersion,\n      };\n    default:\n      return {\n        '@vitest/coverage-v8': vitestCoverageV8Version,\n      };\n  }\n}\n\nexport default vitestGenerator;\n"],"names":["vitestGenerator","vitestGeneratorInternal","tree","schema","hasPlugin","addPlugin","nxJson","tasks","root","projectType","readProjectConfiguration","project","isRootProject","push","jsInitGenerator","skipFormat","initTask","initGenerator","ensureDependencies","readNxJson","hasPluginCheck","plugins","some","p","plugin","testTarget","addOrChangeTestTarget","skipViteConfig","uiFramework","createOrEditViteConfig","includeLib","includeVitest","inSourceTests","rollupOptionsExternal","imports","coverageProvider","createFiles","updateTsConfig","coverageProviderDependency","getCoverageProviderDependency","installCoverageProviderTask","addDependenciesToPackageJson","exists","write","formatFiles","runTasksInSerial","options","projectRoot","joinPathFragments","updateJson","json","compilerOptions","types","includes","references","r","path","tsconfigLibPath","tsconfigAppPath","addTsLibDependencies","generateFiles","join","__dirname","tmpl","offsetFromRoot","vitestCoverageV8Version","vitestCoverageIstanbulVersion"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}