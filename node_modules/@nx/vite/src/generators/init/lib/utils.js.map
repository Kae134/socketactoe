{"version":3,"sources":["../../../../../../../packages/vite/src/generators/init/lib/utils.ts"],"sourcesContent":["import {\n  addDependenciesToPackageJson,\n  installPackagesTask,\n  readNxJson,\n  Tree,\n  updateJson,\n  updateNxJson,\n} from '@nx/devkit';\nimport { nxVersion, vitestVersion, viteVersion } from '../../../utils/versions';\nimport { InitGeneratorSchema } from '../schema';\n\nexport function checkDependenciesInstalled(\n  host: Tree,\n  schema: InitGeneratorSchema\n) {\n  return addDependenciesToPackageJson(\n    host,\n    {},\n    {\n      '@nx/vite': nxVersion,\n      '@nx/web': nxVersion,\n      vite: viteVersion,\n      vitest: vitestVersion,\n      '@vitest/ui': vitestVersion,\n    },\n    undefined,\n    schema.keepExistingVersions\n  );\n}\n\nexport function moveToDevDependencies(tree: Tree) {\n  let wasUpdated = false;\n  updateJson(tree, 'package.json', (packageJson) => {\n    packageJson.dependencies = packageJson.dependencies || {};\n    packageJson.devDependencies = packageJson.devDependencies || {};\n\n    if (packageJson.dependencies['@nx/vite']) {\n      packageJson.devDependencies['@nx/vite'] =\n        packageJson.dependencies['@nx/vite'];\n      delete packageJson.dependencies['@nx/vite'];\n      wasUpdated = true;\n    }\n    return packageJson;\n  });\n\n  return wasUpdated ? () => installPackagesTask(tree) : () => {};\n}\n\nexport function createVitestConfig(tree: Tree) {\n  const nxJson = readNxJson(tree);\n\n  const productionFileSet = nxJson.namedInputs?.production;\n  if (productionFileSet) {\n    productionFileSet.push(\n      '!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)',\n      '!{projectRoot}/tsconfig.spec.json'\n    );\n\n    nxJson.namedInputs.production = Array.from(new Set(productionFileSet));\n  }\n\n  updateNxJson(tree, nxJson);\n}\n"],"names":["checkDependenciesInstalled","createVitestConfig","moveToDevDependencies","host","schema","addDependenciesToPackageJson","nxVersion","vite","viteVersion","vitest","vitestVersion","undefined","keepExistingVersions","tree","wasUpdated","updateJson","packageJson","dependencies","devDependencies","installPackagesTask","nxJson","readNxJson","productionFileSet","namedInputs","production","push","Array","from","Set","updateNxJson"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;IAWgBA,0BAA0B;eAA1BA;;IAqCAC,kBAAkB;eAAlBA;;IAlBAC,qBAAqB;eAArBA;;;wBAvBT;0BAC+C;AAG/C,SAASF,2BACdG,IAAU,EACVC,MAA2B;IAE3B,OAAOC,IAAAA,oCAA4B,EACjCF,MACA,CAAC,GACD;QACE,YAAYG,mBAAS;QACrB,WAAWA,mBAAS;QACpBC,MAAMC,qBAAW;QACjBC,QAAQC,uBAAa;QACrB,cAAcA,uBAAa;IAC7B,GACAC,WACAP,OAAOQ,oBAAoB;AAE/B;AAEO,SAASV,sBAAsBW,IAAU;IAC9C,IAAIC,aAAa;IACjBC,IAAAA,kBAAU,EAACF,MAAM,gBAAgB,CAACG;QAChCA,YAAYC,YAAY,GAAGD,YAAYC,YAAY,IAAI,CAAC;QACxDD,YAAYE,eAAe,GAAGF,YAAYE,eAAe,IAAI,CAAC;QAE9D,IAAIF,YAAYC,YAAY,CAAC,WAAW,EAAE;YACxCD,YAAYE,eAAe,CAAC,WAAW,GACrCF,YAAYC,YAAY,CAAC,WAAW;YACtC,OAAOD,YAAYC,YAAY,CAAC,WAAW;YAC3CH,aAAa;QACf;QACA,OAAOE;IACT;IAEA,OAAOF,aAAa,IAAMK,IAAAA,2BAAmB,EAACN,QAAQ,KAAO;AAC/D;AAEO,SAASZ,mBAAmBY,IAAU;QAGjBO;IAF1B,MAAMA,SAASC,IAAAA,kBAAU,EAACR;IAE1B,MAAMS,qBAAoBF,sBAAAA,OAAOG,WAAW,qBAAlBH,oBAAoBI,UAAU;IACxD,IAAIF,mBAAmB;QACrBA,kBAAkBG,IAAI,CACpB,yDACA;QAGFL,OAAOG,WAAW,CAACC,UAAU,GAAGE,MAAMC,IAAI,CAAC,IAAIC,IAAIN;IACrD;IAEAO,IAAAA,oBAAY,EAAChB,MAAMO;AACrB"}