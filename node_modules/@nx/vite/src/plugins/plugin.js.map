{"version":3,"sources":["../../../../../packages/vite/src/plugins/plugin.ts"],"sourcesContent":["import {\n  CreateDependencies,\n  CreateNodes,\n  CreateNodesContext,\n  detectPackageManager,\n  joinPathFragments,\n  readJsonFile,\n  TargetConfiguration,\n  workspaceRoot,\n  writeJsonFile,\n} from '@nx/devkit';\nimport { dirname, isAbsolute, join, relative } from 'path';\nimport { getNamedInputs } from '@nx/devkit/src/utils/get-named-inputs';\nimport { existsSync, readdirSync } from 'fs';\nimport { calculateHashForCreateNodes } from '@nx/devkit/src/utils/calculate-hash-for-create-nodes';\nimport { projectGraphCacheDirectory } from 'nx/src/utils/cache-directory';\nimport { getLockFileName } from '@nx/js';\nimport { loadViteDynamicImport } from '../utils/executor-utils';\n\nexport interface VitePluginOptions {\n  buildTargetName?: string;\n  testTargetName?: string;\n  serveTargetName?: string;\n  previewTargetName?: string;\n  serveStaticTargetName?: string;\n}\n\nconst cachePath = join(projectGraphCacheDirectory, 'vite.hash');\nconst targetsCache = readTargetsCache();\n\nfunction readTargetsCache(): Record<\n  string,\n  Record<string, TargetConfiguration>\n> {\n  return existsSync(cachePath) ? readJsonFile(cachePath) : {};\n}\n\nfunction writeTargetsToCache() {\n  const oldCache = readTargetsCache();\n  writeJsonFile(cachePath, {\n    ...oldCache,\n    ...targetsCache,\n  });\n}\n\nexport const createDependencies: CreateDependencies = () => {\n  writeTargetsToCache();\n  return [];\n};\n\nexport const createNodes: CreateNodes<VitePluginOptions> = [\n  '**/{vite,vitest}.config.{js,ts,mjs,mts,cjs,cts}',\n  async (configFilePath, options, context) => {\n    const projectRoot = dirname(configFilePath);\n    // Do not create a project if package.json and project.json isn't there.\n    const siblingFiles = readdirSync(join(context.workspaceRoot, projectRoot));\n    if (\n      !siblingFiles.includes('package.json') &&\n      !siblingFiles.includes('project.json')\n    ) {\n      return {};\n    }\n\n    options = normalizeOptions(options);\n\n    // We do not want to alter how the hash is calculated, so appending the config file path to the hash\n    // to prevent vite/vitest files overwriting the target cache created by the other\n    const hash =\n      calculateHashForCreateNodes(projectRoot, options, context, [\n        getLockFileName(detectPackageManager(context.workspaceRoot)),\n      ]) + configFilePath;\n\n    targetsCache[hash] ??= await buildViteTargets(\n      configFilePath,\n      projectRoot,\n      options,\n      context\n    );\n\n    return {\n      projects: {\n        [projectRoot]: {\n          root: projectRoot,\n          targets: targetsCache[hash],\n        },\n      },\n    };\n  },\n];\n\nasync function buildViteTargets(\n  configFilePath: string,\n  projectRoot: string,\n  options: VitePluginOptions,\n  context: CreateNodesContext\n) {\n  const absoluteConfigFilePath = joinPathFragments(\n    context.workspaceRoot,\n    configFilePath\n  );\n\n  // Workaround for the `build$3 is not a function` error that we sometimes see in agents.\n  // This should be removed later once we address the issue properly\n  try {\n    const importEsbuild = () => new Function('return import(\"esbuild\")')();\n    await importEsbuild();\n  } catch {\n    // do nothing\n  }\n  const { resolveConfig } = await loadViteDynamicImport();\n  const viteConfig = await resolveConfig(\n    {\n      configFile: absoluteConfigFilePath,\n      mode: 'development',\n    },\n    'build'\n  );\n\n  const { buildOutputs, testOutputs, hasTest, isBuildable } = getOutputs(\n    viteConfig,\n    projectRoot\n  );\n\n  const namedInputs = getNamedInputs(projectRoot, context);\n\n  const targets: Record<string, TargetConfiguration> = {};\n\n  // If file is not vitest.config and buildable, create targets for build, serve, preview and serve-static\n  const hasRemixPlugin =\n    viteConfig.plugins && viteConfig.plugins.some((p) => p.name === 'remix');\n  if (\n    !configFilePath.includes('vitest.config') &&\n    !hasRemixPlugin &&\n    isBuildable\n  ) {\n    targets[options.buildTargetName] = await buildTarget(\n      options.buildTargetName,\n      namedInputs,\n      buildOutputs,\n      projectRoot\n    );\n\n    targets[options.serveTargetName] = serveTarget(projectRoot);\n\n    targets[options.previewTargetName] = previewTarget(projectRoot);\n\n    targets[options.serveStaticTargetName] = serveStaticTarget(options) as {};\n  }\n\n  // if file is vitest.config or vite.config has definition for test, create target for test\n  if (configFilePath.includes('vitest.config') || hasTest) {\n    targets[options.testTargetName] = await testTarget(\n      namedInputs,\n      testOutputs,\n      projectRoot\n    );\n  }\n\n  return targets;\n}\n\nasync function buildTarget(\n  buildTargetName: string,\n  namedInputs: {\n    [inputName: string]: any[];\n  },\n  outputs: string[],\n  projectRoot: string\n) {\n  return {\n    command: `vite build`,\n    options: { cwd: joinPathFragments(projectRoot) },\n    cache: true,\n    dependsOn: [`^${buildTargetName}`],\n    inputs: [\n      ...('production' in namedInputs\n        ? ['production', '^production']\n        : ['default', '^default']),\n      {\n        externalDependencies: ['vite'],\n      },\n    ],\n    outputs,\n  };\n}\n\nfunction serveTarget(projectRoot: string) {\n  const targetConfig: TargetConfiguration = {\n    command: `vite serve`,\n    options: {\n      cwd: joinPathFragments(projectRoot),\n    },\n  };\n\n  return targetConfig;\n}\n\nfunction previewTarget(projectRoot: string) {\n  const targetConfig: TargetConfiguration = {\n    command: `vite preview`,\n    options: {\n      cwd: joinPathFragments(projectRoot),\n    },\n  };\n\n  return targetConfig;\n}\n\nasync function testTarget(\n  namedInputs: {\n    [inputName: string]: any[];\n  },\n  outputs: string[],\n  projectRoot: string\n) {\n  return {\n    command: `vitest`,\n    options: { cwd: joinPathFragments(projectRoot) },\n    cache: true,\n    inputs: [\n      ...('production' in namedInputs\n        ? ['default', '^production']\n        : ['default', '^default']),\n      {\n        externalDependencies: ['vitest'],\n      },\n      { env: 'CI' },\n    ],\n    outputs,\n  };\n}\n\nfunction serveStaticTarget(options: VitePluginOptions) {\n  const targetConfig: TargetConfiguration = {\n    executor: '@nx/web:file-server',\n    options: {\n      buildTarget: `${options.buildTargetName}`,\n      spa: true,\n    },\n  };\n\n  return targetConfig;\n}\n\nfunction getOutputs(\n  viteConfig: Record<string, any> | undefined,\n  projectRoot: string\n): {\n  buildOutputs: string[];\n  testOutputs: string[];\n  hasTest: boolean;\n  isBuildable: boolean;\n} {\n  const { build, test } = viteConfig;\n\n  const buildOutputPath = normalizeOutputPath(\n    build?.outDir,\n    projectRoot,\n    'dist'\n  );\n\n  const isBuildable =\n    build?.lib ||\n    build?.rollupOptions?.inputs ||\n    existsSync(join(workspaceRoot, projectRoot, 'index.html'));\n\n  const reportsDirectoryPath = normalizeOutputPath(\n    test?.coverage?.reportsDirectory,\n    projectRoot,\n    'coverage'\n  );\n\n  return {\n    buildOutputs: [buildOutputPath],\n    testOutputs: [reportsDirectoryPath],\n    hasTest: !!test,\n    isBuildable,\n  };\n}\n\nfunction normalizeOutputPath(\n  outputPath: string | undefined,\n  projectRoot: string,\n  path: 'coverage' | 'dist'\n): string | undefined {\n  if (!outputPath) {\n    if (projectRoot === '.') {\n      return `{projectRoot}/${path}`;\n    } else {\n      return `{workspaceRoot}/${path}/{projectRoot}`;\n    }\n  } else {\n    if (isAbsolute(outputPath)) {\n      return `{workspaceRoot}/${relative(workspaceRoot, outputPath)}`;\n    } else {\n      if (outputPath.startsWith('..')) {\n        return join('{workspaceRoot}', join(projectRoot, outputPath));\n      } else {\n        return join('{projectRoot}', outputPath);\n      }\n    }\n  }\n}\n\nfunction normalizeOptions(options: VitePluginOptions): VitePluginOptions {\n  options ??= {};\n  options.buildTargetName ??= 'build';\n  options.serveTargetName ??= 'serve';\n  options.previewTargetName ??= 'preview';\n  options.testTargetName ??= 'test';\n  options.serveStaticTargetName ??= 'serve-static';\n  return options;\n}\n"],"names":["createDependencies","createNodes","cachePath","join","projectGraphCacheDirectory","targetsCache","readTargetsCache","existsSync","readJsonFile","writeTargetsToCache","oldCache","writeJsonFile","configFilePath","options","context","hash","projectRoot","dirname","siblingFiles","readdirSync","workspaceRoot","includes","normalizeOptions","calculateHashForCreateNodes","getLockFileName","detectPackageManager","buildViteTargets","projects","root","targets","absoluteConfigFilePath","joinPathFragments","importEsbuild","Function","resolveConfig","loadViteDynamicImport","viteConfig","configFile","mode","buildOutputs","testOutputs","hasTest","isBuildable","getOutputs","namedInputs","getNamedInputs","hasRemixPlugin","plugins","some","p","name","buildTargetName","buildTarget","serveTargetName","serveTarget","previewTargetName","previewTarget","serveStaticTargetName","serveStaticTarget","testTargetName","testTarget","outputs","command","cwd","cache","dependsOn","inputs","externalDependencies","targetConfig","env","executor","spa","build","test","buildOutputPath","normalizeOutputPath","outDir","lib","rollupOptions","reportsDirectoryPath","coverage","reportsDirectory","outputPath","path","isAbsolute","relative","startsWith"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}