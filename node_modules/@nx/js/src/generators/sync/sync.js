"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.syncGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const node_path_1 = require("node:path");
const plugin_1 = require("../../plugins/typescript/plugin");
async function syncGenerator(tree, options) {
    // Ensure that the plugin has been wired up in nx.json
    const nxJson = (0, devkit_1.readNxJson)(tree);
    let tscPluginConfig = nxJson.plugins.find((p) => {
        if (typeof p === 'string') {
            return p === plugin_1.PLUGIN_NAME;
        }
        return p.plugin === plugin_1.PLUGIN_NAME;
    });
    if (!tscPluginConfig) {
        throw new Error(`The ${plugin_1.PLUGIN_NAME} plugin must be added to the "plugins" array in nx.json before syncing tsconfigs`);
    }
    const projectGraph = await (0, devkit_1.createProjectGraphAsync)();
    const firstPartyDeps = Object.entries(projectGraph.dependencies).filter(([name, data]) => !name.startsWith('npm:') && data.length > 0);
    // Root tsconfig containing project references for the whole workspace
    const rootTsconfigPath = 'tsconfig.json';
    const rootTsconfig = (0, devkit_1.readJson)(tree, rootTsconfigPath);
    const tsconfigProjectNodeValues = Object.values(projectGraph.nodes).filter((node) => {
        const projectTsconfigPath = (0, devkit_1.joinPathFragments)(node.data.root, 'tsconfig.json');
        return tree.exists(projectTsconfigPath);
    });
    if (tsconfigProjectNodeValues.length > 0) {
        // Sync the root tsconfig references from the project graph (do not destroy existing references)
        rootTsconfig.references = rootTsconfig.references || [];
        const referencesSet = new Set(rootTsconfig.references.map((ref) => normalizeReferencePath(ref.path)));
        for (const node of tsconfigProjectNodeValues) {
            const normalizedPath = normalizeReferencePath(node.data.root);
            // Skip the root tsconfig itself
            if (node.data.root !== '.' && !referencesSet.has(normalizedPath)) {
                rootTsconfig.references.push({ path: `./${normalizedPath}` });
            }
        }
        (0, devkit_1.writeJson)(tree, rootTsconfigPath, rootTsconfig);
    }
    for (const [name, data] of firstPartyDeps) {
        // Get the source project nodes for the source and target
        const sourceProjectNode = projectGraph.nodes[name];
        // Find the relevant tsconfig files for the source project
        const sourceProjectTsconfigPath = (0, devkit_1.joinPathFragments)(sourceProjectNode.data.root, 'tsconfig.json');
        if (!tree.exists(sourceProjectTsconfigPath)) {
            console.warn(`Skipping project "${name}" as there is no tsconfig.json file found in the project root "${sourceProjectNode.data.root}"`);
            continue;
        }
        const sourceTsconfig = (0, devkit_1.readJson)(tree, sourceProjectTsconfigPath);
        for (const dep of data) {
            // Get the target project node
            const targetProjectNode = projectGraph.nodes[dep.target];
            if (!targetProjectNode) {
                // It's an external dependency
                continue;
            }
            // Set defaults only in the case where we have at least one dependency so that we don't patch files when not necessary
            sourceTsconfig.references = sourceTsconfig.references || [];
            // Ensure the project reference for the target is set
            const relativePathToTargetRoot = (0, node_path_1.relative)(sourceProjectNode.data.root, targetProjectNode.data.root);
            if (!sourceTsconfig.references.some((ref) => ref.path === relativePathToTargetRoot)) {
                // Make sure we unshift rather than push so that dependencies are built in the right order by TypeScript when it is run directly from the root of the workspace
                sourceTsconfig.references.unshift({ path: relativePathToTargetRoot });
            }
        }
        // Update the source tsconfig files
        (0, devkit_1.writeJson)(tree, sourceProjectTsconfigPath, sourceTsconfig);
    }
    await (0, devkit_1.formatFiles)(tree);
}
exports.syncGenerator = syncGenerator;
// Normalize the paths to strip leading `./` and trailing `/tsconfig.json`
function normalizeReferencePath(path) {
    return path.replace(/\/tsconfig.json$/, '').replace(/^\.\//, '');
}
